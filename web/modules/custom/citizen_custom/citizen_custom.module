<?php

/**
 * @file
 * Contains citizen_custom.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_help().
 */
function citizen_custom_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the citizen custom module.
    case 'help.page.citizen_custom':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Custom glue module for Electric Citizen sites') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_presave().
 */
function citizen_custom_entity_presave(EntityInterface $entity) {
  // Set value of field_alias for menu taxonomy.
  switch ($entity->bundle()) {
    case 'main_menu':
      $link = $entity->get('field_menu_link')->getValue();
      $uri = $link[0]['uri'];
      // Check for external link and process if TRUE.
      if (UrlHelper::isExternal($uri)) {
        $entity->set('field_alias', $uri);
        break;
      } else {
        $url = str_replace('entity:', '/', $uri);
        $url = str_replace('internal:', '', $url);
        //get the alias for the path and assign it in path.
        try {
          $alias = Drupal::service('path.alias_manager')->getAliasByPath($url);
        }
        catch (Exception $e) {
          $alias = $url;
        }
        $entity->set('field_alias', $alias);
        break;
      }
    case 'footer_menu':
      $link = $entity->get('field_menu_link')->getValue();
      $uri = $link[0]['uri'];
      // Check for external link and process if TRUE.
      if (UrlHelper::isExternal($uri)) {
        $entity->set('field_alias', $uri);
        break;
      } else {
        $url = str_replace('entity:', '/', $uri);
        $url = str_replace('internal:', '', $url);
        //get the alias for the path and assign it in path.
        // TODO: Add if for garbage handling without blowing up.
        try {
          $alias = Drupal::service('path.alias_manager')->getAliasByPath($url);
        }
        catch (Exception $e) {
          $alias = $url;
        }
        $entity->set('field_alias', $alias);
        break;
      }
  }
}


/**
 * Implements hook_theme().
 */
function citizen_custom_theme() {
  return [
    'citizen_custom' => [
      'template' => 'citizen_custom',
      'render element' => 'children',
    ],
    'site_search' => [
      'variables' => [
        'title' => 'Site Search',
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_html to get roles.
 */
function citizen_custom_preprocess_html(&$variables){
  /* Find the current user */
  $user = \Drupal::currentUser();
  $userRole = $user->getRoles();
  foreach($userRole as $role ){
    if($role != 'authenticated'){
      $variables['attributes']['class'][] = 'role-' . $role;
    }
  }
}

/**
 * Implements hook_local_tasks_alter().
 */
function citizen_custom_local_tasks_alter(&$local_tasks) {
  if(isset($local_tasks['system.admin_content'])){
    unset($local_tasks['system.admin_content']);
  }
}

/**
 * Implements hook_local_actions_alter().
 */
function citizen_custom_menu_local_actions_alter(&$local_actions) {
  $local_actions['node.add_page']['title'] = '+ Add Content';
  $local_actions['block_content_add_action']['title'] = '+ Add Custom Block';
  $local_actions['media.add']['title'] = '+ Add Media';
  $local_actions['media_library.add']['title'] = '+ Add Media';
  $local_actions['redirect.add']['title'] = '+ Add Redirect';
  $local_actions['shortcut.link_add']['title'] = '+ Add Shortcut';
  $local_actions['entity.taxonomy_term.add_form']['title'] = '+ Add Term';
  $local_actions['user_admin_create']['title'] = '+ Add User';
}

/**
 * Implements hook_form_alter().
 */
function citizen_custom_form_alter(&$form, FormStateInterface $form_state) {
  $formId = $form['#id'];
  $user = \Drupal::currentUser();
  $userRole = $user->getRoles();
  
  //clean up menu link form for non-admins
  if($formId == 'menu-link-content-menu-link-content-form'){
    $parentMenu = substr($form['menu_parent']['#default_value'], 0, -1);
    $humanParent = ucwords(str_replace('_',' ',$parentMenu));
    $form['title']['#prefix'] = '<div class="form-item-prefix">Go back to the <a href="/admin/structure/menu/manage/'.$parentMenu.'/">'.$humanParent.' menu</a>.</div>';
    if((in_array('editor', $userRole)) || (in_array('site_manager', $userRole))){
      unset($form['description'],$form['weight'],$form['expanded'],$form['link']['widget'][0]['options']);
    }
  } //End menu content link form alter

  //alter taxononmy term forms
  if($formId == 'taxonomy-overview-terms'){
    $form['#prefix'] = '<div class="vocab-nav">Add, edit, delete, or rearrange the terms in this vocabularyâ€”or return to the <a href="/admin/structure/taxonomy">vocabularies list</a>.</div><br>';
  }

  //alter taxononmy term forms
  if(isset($form['vid']['#value'])){
    $vocab = $form['vid']['#value'];
    $human = ucwords(str_replace('_',' ',$vocab));
    if(isset($form['tid']['#value'])){
      $form['name']['#prefix'] = '<div class="form-item-prefix">Edit this <span>'.$human.'</span> term or return to the <a href="/admin/structure/taxonomy/manage/'.$vocab.'/overview">terms list</a>.</div>';
    }else{
      $form['name']['#prefix'] = '<div class="form-item-prefix">Add a new <span>'.$human.'</span> term or return to the <a href="/admin/structure/taxonomy/manage/'.$vocab.'/overview">terms list</a>.</div>';
    }
  }

  //move restricted field to footer and allow only admin access
  if(isset($form['field_restricted'])){
    $form['field_restricted']['#group'] = 'footer';
    if(in_array('administrator', $userRole)){
      $form['field_restricted']['#access'] = TRUE;
    }else{
      $form['field_restricted']['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_node_access().
 *
 * Enforces our access rules for custom workflow target content to force updates
 * only if the user is targeted in the user select field
 */
function citizen_custom_node_access(NodeInterface $node, $op, AccountInterface $account) {
  // If a node is being updated
  if (($op == 'update') || ($op == 'delete') || ($op == 'view')) {
    if (isset($node->field_restricted)) {
      if (!empty($node->field_restricted)) {
        if ($node->get("field_restricted")->getString() == '1') {
          return AccessResult::forbidden();
        }
      }
    }
  }
  // No opinion.
  return AccessResult::neutral();
}

