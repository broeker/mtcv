<?php

/**
 * @file
 * Contains citizen_custom.module.
 */

use Drupal\Core\Entity\Entity;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element\Button;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Url;
use Drupal\Core\Link;

/**
 * Implements hook_help().
 */
function citizen_custom_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the citizen custom module.
    case 'help.page.citizen_custom':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Custom glue module for Electric Citizen sites') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_presave().
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function citizen_custom_entity_presave(EntityInterface $entity) {
  // Set value of field_alias for menu taxonomy.
  switch ($entity->bundle()) {
    case 'main_menu':
      $link = $entity->get('field_menu_link')->getValue();
      $uri = $link[0]['uri'];
      // Check for external link and process if TRUE.
      if (UrlHelper::isExternal($uri)) {
        $entity->set('field_alias', $uri);
        break;
      } else {
        $url = str_replace('entity:', '/', $uri);
        $url = str_replace('internal:', '', $url);
        //get the alias for the path and assign it in path.
        try {
          $alias = Drupal::service('path.alias_manager')->getAliasByPath($url);
        }
        catch (Exception $e) {
          $alias = $url;
        }
        $entity->set('field_alias', $alias);
        break;
      }
    case 'footer_menu':
      $link = $entity->get('field_menu_link')->getValue();
      $uri = $link[0]['uri'];
      // Check for external link and process if TRUE.
      if (UrlHelper::isExternal($uri)) {
        $entity->set('field_alias', $uri);
        break;
      } else {
        $url = str_replace('entity:', '/', $uri);
        $url = str_replace('internal:', '', $url);
        //get the alias for the path and assign it in path.
        // TODO: Add if for garbage handling without blowing up.
        try {
          $alias = Drupal::service('path.alias_manager')->getAliasByPath($url);
        }
        catch (Exception $e) {
          $alias = $url;
        }
        $entity->set('field_alias', $alias);
        break;
      }
  }
  // Saving EC Button aliases from link.
  if ($entity->bundle() == ('page' /*|| 'resource'*/)) {
    $buttonList = [];
    $allParagraphs = $entity->get('field_content')->referencedEntities();
    foreach ($allParagraphs as $paragraph) {
      $paragraphType = $paragraph->bundle();
      if ($paragraphType == 'button') {
        $buttons = $paragraph->get('field_ec_button');
        foreach ($buttons as $key => $ecLink) {
          $linkItem = $ecLink->getValue();
          $uri = $linkItem['uri'];
          // If the Link is external keep the alias the same as the url.
          if (UrlHelper::isExternal($uri)) {
            $linkItem['alias'] = $uri;
          } else {
            // If link path is returned as internal:.
            if (strpos($uri, 'internal') === 0) {
              // If the internal is actually to a node.
              if (strpos($uri, 'node')) {
                $input = explode("/", $uri);
                $nid = $input[2];
                $linkItem['alias'] = Url::fromRoute('entity.node.canonical', ['node' => $nid])->toString();
              // If the internal is a fragment append the fragment onto the current nodes alias.
              } else {
                $input = explode(":", $uri);
                $current_nid = $entity->id();
                $linkItem['alias'] = Url::fromRoute('entity.node.canonical', ['node' => $current_nid])->toString() . $input[1];
              }
            } else {
              $url = Url::fromUri($uri);
              $nid = $url->getRouteParameters()['node'];
              $linkItem['alias'] = Url::fromRoute('entity.node.canonical', ['node' => $nid])->toString();
            }
          }
          // Generate the array of values to assign to the paragraph.
          $buttonList[] = $linkItem;
        }
        $paragraph->set('field_ec_button', $buttonList);
        $paragraph->save();
      }
    }
  }
}

//// todo: not quite working.
//if ($entity->bundle() == ('button' /*|| 'resource'*/)) {
//  $buttonList = [];
//  $step1 = $entity->get('field_content')->referencedEntities();
//  foreach ($step1 as $step2) {
//    $step3 = $step2->bundle();
//    if ($step3 == 'button') {
//      $buttons = $step2->get('field_ec_button');
//      foreach ($buttons as $key => $paragraph) {
//        $linkItem = $paragraph->getValue();
//        $uri = $linkItem['uri'];
//        if (UrlHelper::isExternal($uri)) {
//          $linkItem['alias'] = $uri;
//        } else {
//
//          if (strpos($uri, 'internal') === 0) {
//            $input = explode(":", $uri);
//            $current_nid = $entity->getParentEntity()->id();
//            $linkItem['alias'] = Url::fromRoute('entity.node.canonical', ['node' => $current_nid])->toString() . $input[1];
//          } else {
//            $url = Url::fromUri($uri);
//            $nid = $url->getRouteParameters()['node'];
//            $linkItem['alias'] = Url::fromRoute('entity.node.canonical', ['node' => $nid])->toString();
//          }
//        }
//        $buttonList[] = $linkItem;
//      }
//      $step2->set('field_ec_button', $buttonList);
//      $step2->save();
//    }
//  }
//}
//}

/**
 * Implements hook_theme().
 */
function citizen_custom_theme() {
  return [
    'citizen_custom' => [
      'template' => 'citizen_custom',
      'render element' => 'children',
    ],
    'site_search' => [
      'variables' => [
        'title' => 'Site Search',
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_html to get roles.
 */
function citizen_custom_preprocess_html(&$variables){
  /* Find the current user */
  $user = \Drupal::currentUser();
  $userRole = $user->getRoles();
  foreach($userRole as $role ){
    if($role != 'authenticated'){
      $variables['attributes']['class'][] = 'role-' . $role;
    }
  }
}

/**
 * Implements hook_local_tasks_alter().
 */
function citizen_custom_local_tasks_alter(&$local_tasks) {
  if(isset($local_tasks['system.admin_content'])){
    unset($local_tasks['system.admin_content']);
  }
}

/**
 * Implements hook_local_actions_alter().
 */
function citizen_custom_menu_local_actions_alter(&$local_actions) {
  $local_actions['node.add_page']['title'] = '+ Add Content';
  $local_actions['block_content_add_action']['title'] = '+ Add Custom Block';
  $local_actions['media.add']['title'] = '+ Add Media';
  $local_actions['media_library.add']['title'] = '+ Add Media';
  $local_actions['redirect.add']['title'] = '+ Add Redirect';
  $local_actions['shortcut.link_add']['title'] = '+ Add Shortcut';
  $local_actions['entity.taxonomy_term.add_form']['title'] = '+ Add Term';
  $local_actions['user_admin_create']['title'] = '+ Add User';
}

/**
 * Implements hook_form_alter().
 */
function citizen_custom_form_alter(&$form, FormStateInterface $form_state) {
  $formId = $form['#id'];
  $user = \Drupal::currentUser();
  $userRole = $user->getRoles();

  //clean up menu link form for non-admins
  if($formId == 'menu-link-content-menu-link-content-form'){
    $parentMenu = substr($form['menu_parent']['#default_value'], 0, -1);
    $humanParent = ucwords(str_replace('_',' ',$parentMenu));
    $form['title']['#prefix'] = '<div class="form-item-prefix">Go back to the <a href="/admin/structure/menu/manage/'.$parentMenu.'/">'.$humanParent.' menu</a>.</div>';
    if((in_array('editor', $userRole)) || (in_array('site_manager', $userRole))){
      unset($form['description'],$form['weight'],$form['expanded'],$form['link']['widget'][0]['options']);
    }
  } //End menu content link form alter

  //alter taxononmy term forms
  if($formId == 'taxonomy-overview-terms'){
    $form['#prefix'] = '<div class="vocab-nav">Add, edit, delete, or rearrange the terms in this vocabularyâ€”or return to the <a href="/admin/structure/taxonomy">vocabularies list</a>.</div><br>';
  }

  //alter taxononmy term forms
  if(isset($form['vid']['#value'])){
    $vocab = $form['vid']['#value'];
    $human = ucwords(str_replace('_',' ',$vocab));
    if(isset($form['tid']['#value'])){
      $form['name']['#prefix'] = '<div class="form-item-prefix">Edit this <span>'.$human.'</span> term or return to the <a href="/admin/structure/taxonomy/manage/'.$vocab.'/overview">terms list</a>.</div>';
    }else{
      $form['name']['#prefix'] = '<div class="form-item-prefix">Add a new <span>'.$human.'</span> term or return to the <a href="/admin/structure/taxonomy/manage/'.$vocab.'/overview">terms list</a>.</div>';
    }
  }

  //move restricted field to footer and allow only admin access
  if(isset($form['field_restricted'])){
    $form['field_restricted']['#group'] = 'footer';
    if(in_array('administrator', $userRole)){
      $form['field_restricted']['#access'] = TRUE;
      if(($form['field_restricted']['widget']['value']['#default_value'] == TRUE) && ($formId == 'node-page-edit-form')){
        drupal_set_message('Editing or deleting restricted pages can have grave consequences in Gatsby. Proceed with caution.','warning');
      }
    }else{
      $form['field_restricted']['#access'] = FALSE;
      //remove delete option from basic blocks and logo grid blocks for non-admins
      if($form['field_restricted']['widget']['value']['#default_value'] == TRUE){
        if (($formId == 'block-content-basic-edit-form') || ($formId == 'block-content-logo-grid-edit-form')){
          unset($form['actions']['delete']);
        }
      }
    }
  }
  //prevent non-admin deletion of all one-off blocks
  switch($formId){
    case 'block-content-homepage-featured-content-edit-form':
      if(!in_array('administrator', $userRole)){
        unset($form['actions']['delete']);
      }
    case 'block-content-homepage-intro-edit-form':
      if(!in_array('administrator', $userRole)){
        unset($form['actions']['delete']);
      }
    case 'block-content-homepage-resources-edit-form':
      if(!in_array('administrator', $userRole)){
        unset($form['actions']['delete']);
      }
    case 'block-content-social-media-links-edit-form':
      if(!in_array('administrator', $userRole)){
        unset($form['actions']['delete']);
      }
    case 'block-content-escape-edit-form':
      if(!in_array('administrator', $userRole)){
        unset($form['actions']['delete']);
      }
  }
}

/**
 * Implements hook_node_access().
 *
 * Enforces admin access restriction on marked entities
 */
function citizen_custom_node_access(NodeInterface $node, $op, AccountInterface $account) {
  // If a node is being updated
  if (($op == 'update') || ($op == 'delete')) {
    if (isset($node->field_restricted)) {
      if (!empty($node->field_restricted)) {
        if ($node->get("field_restricted")->getString() == '1') {
          return AccessResult::forbidden();
        }
      }
    }
  }
  // No opinion.
  return AccessResult::neutral();
}


//function citizen_custom_preprocess_field(&$variables, $hook){
//  if ($variables['element']['#field_type'] === 'link') {
//    $items = $variables["element"]["#items"];
//    foreach ($items as $key => $item) {
//      $uri = $item->getValue()['uri'];
//      $external = UrlHelper::isExternal($uri);
//      if ($external) {
//      } else {
//
//        if (strpos($uri, 'internal') === 0) {
//          $input = explode(":", $uri);
//          $current_nid = $variables['element']['#object']->getParentEntity()->id();
//          $alias = Url::fromRoute('entity.node.canonical', ['node' => $current_nid])->toString() . '/' . $input[1];
//
//
//        } else {
//          $url = Url::fromUri($uri);
//          $nid = $url->getRouteParameters()['node'];
//          $alias = Url::fromRoute('entity.node.canonical', ['node' => $nid])->toString();
//          $variables['items'][$key]['content']['#ec_alias'] = $alias;
//        }
//      }
//    }
//  }
//}

//function citizen_custom_field_widget_link_default_form_alter(&$element, FormStateInterface $form_state, $context){
//  $name = $context;
//  $e = $element;
//}


//if ($url->isExternal()) {
//  $alias = $item->uri;
//} else {
//  $uri = $item->getValue()['uri'];
//  if (strpos($uri, 'internal') === 0) {
//    $input = explode(":", $uri);
//    $current_nid = $entity->getParentEntity()->id();
//    $alias = Url::fromRoute('entity.node.canonical', ['node' => $current_nid])->toString() . '/' . $input[1];
//  } else {
//    $nid = $url->getRouteParameters()['node'];
//    $alias = Url::fromRoute('entity.node.canonical', ['node' => $nid])->toString();
//  }
//}
//$element[$delta]['alias'] = $alias;
